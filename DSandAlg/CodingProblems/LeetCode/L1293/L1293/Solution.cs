#region

using System.Collections.Generic;
using NUnit.Framework;

#endregion

// 1293. Shortest Path in a Grid with Obstacles Elimination
// https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

namespace L1293
{
    public class Solution
    {
        private static readonly (int r, int c)[] Directions = {(-1, 0), (0, -1), (0, 1), (1, 0)};

        public int ShortestPath(int[][] grid, int k)
        {
            if (grid.Length < 1)
            {
                return -1;
            }

            var visited = new HashSet<(int row, int col)>
            {
                (0, 0)
            };
            var (k2, steps) = DFS(grid, 0, 0, k, 0, 0, visited);
            return k2 <= k ? steps : -1;
        }

        private (int k, int steps) DFS(int[][] grid, int row, int column, int maxK, int k, int steps
            , HashSet<(int row, int col)> visited)
        {
            var nrows = grid.Length;
            var ncols = grid[0].Length;

            if (row == nrows - 1 && column == ncols - 1)
            {
                // SS: found end
                return (k, steps);
            }

            int[] k2 = {k, k, k, k};
            int[] steps2 = {int.MaxValue, int.MaxValue, int.MaxValue, int.MaxValue};

            for (var i = 0; i < 4; i++)
            {
                var r = row + Directions[i].r;
                var c = column + Directions[i].c;
                if (r >= 0 && r < nrows && c >= 0 && c < ncols)
                {
                    if (visited.Contains((r, c)) == false)
                    {
                        var isWall = grid[r][c] == 1;
                        if (isWall == false || k + 1 <= maxK)
                        {
                            visited.Add((r, c));
                            (k2[i], steps2[i]) = DFS(grid, r, c, maxK, isWall ? k + 1 : k, steps + 1, visited);
                            visited.Remove((r, c));
                        }
                    }
                }
            }

            // SS: we are interested in the minimum length path
            var bestK = int.MaxValue;
            var bestSteps = int.MaxValue;

            for (var i = 0; i < 4; i++)
            {
                var ki = k2[i];
                var stepi = steps2[i];

                if (ki <= maxK && stepi < bestSteps)
                {
                    bestK = ki;
                    bestSteps = stepi;
                }
            }

            return (bestK, bestSteps < int.MaxValue ? bestSteps : int.MaxValue);
        }

        [TestFixture]
        public class Tests
        {
            [Test]
            public void Test1()
            {
                // Arrange
                var grid = new[]
                {
                    new[] {0, 0, 0}, new[] {1, 1, 0}, new[] {0, 0, 0}, new[] {0, 1, 1}, new[] {0, 0, 0}
                };

                var k = 1;

                // Act
                var result = new Solution().ShortestPath(grid, k);

                // Assert
                Assert.AreEqual(6, result);
            }

            [Test]
            public void Test2()
            {
                // Arrange
                var grid = new[]
                {
                    new[] {0, 1, 1}, new[] {1, 1, 1}, new[] {1, 0, 0}
                };

                var k = 1;

                // Act
                var result = new Solution().ShortestPath(grid, k);

                // Assert
                Assert.AreEqual(-1, result);
            }

            [Test]
            public void Test3()
            {
                // Arrange
                var grid = new[]
                {
                    new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 0
                    }
                    , new[]
 {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                    , new[]
                    {
                        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                        , 1, 1, 1, 1, 1, 1, 1, 1
                    }
                    , new[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                        , 0, 0, 0, 0, 0, 0, 0, 0
                    }
                };

                var k = 5;

                // Act
                var result = new Solution().ShortestPath(grid, k);

                // Assert
                Assert.AreEqual(-1, result);
            }
        }
    }
}